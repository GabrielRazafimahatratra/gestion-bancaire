generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  numeroCompte                  String                @id
  nomClient                     String
  prenomsClient                 String
  addresseClient                String
  emailClient                   String                @unique
  telephoneClient               String
  montantClient                 Float

  prets                         Pret[]
  remboursements                RemboursementPret[]
  retraits                      Retrait[]
  versements                    Versement[]
  virements_destinataires       Virement[]            @relation("clientDestinataire")
  virements_expediteurs         Virement[]            @relation("clientExpediteur")
}

model Caissier {
  numeroCaissier    String @id
  nomCaissier       String
  prenomsCaissier   String
  numeroCaisse      String
  emailCaissier     String @unique
  password          String
  telephoneCaissier String
}

model Pret {
  numeroPret             String   @id
  montantPret            Decimal
  tauxPret               Decimal
  delaiPret              Int
  datePret               DateTime @default(now()) @db.Date
  montantARendre         Decimal
  restePret              Decimal


  emprunteur             Client   @relation(fields: [numeroCompteEmprunteur], references: [numeroCompte])
  numeroCompteEmprunteur String

  remboursements         RemboursementPret[]

}


model Banque {
  bankIdentifierCode          String    @id
  numeroCompteBanque          String    @unique
  soldeBanque                 Decimal
  soldePayeParRemboursements  Decimal   @default(0)  


  remboursementPrets          RemboursementPret[]   
}


model RemboursementPret {
  idRemboursement           String  @id
  numeroCompteDeLaBanque    String
  montantAPayer             Decimal


  remboursementPret         Banque  @relation(fields: [numeroCompteDeLaBanque], references: [numeroCompteBanque])

  rembourseur               Client  @relation(fields: [numeroCompte], references: [numeroCompte])
  numeroCompte              String

  rembourserPret            Pret    @relation(fields: [numeroPret], references: [numeroPret])
  numeroPret                String
}


model Retrait {
  numeroRetraits    String    @id
  numeroCompte      String
  montantRetrait    Decimal
  dateRetrait       DateTime  @default(now())

  retraitClient     Client    @relation(fields: [numeroCompte], references: [numeroCompte])
}


model Versement {
  numeroVersement           String    @id
  numeroCompteVersement     String
  montantVersement          Decimal
  dateVersement             DateTime  @default(now())
  nomVerseur                String
  prenomsVerseur            String?

  versementsClient          Client    @relation(fields: [numeroCompteVersement], references: [numeroCompte])
}

model Virement {
  numeroVirement              String    @id
  numeroCompteDestinataire    String    
  numeroCompteExpediteur      String
  montantVirement             Decimal
  dateVirement                DateTime  @default(now())


  clientDestinataire          Client    @relation("clientDestinataire", fields: [numeroCompteDestinataire], references: [numeroCompte])
  clientExpediteur            Client    @relation("clientExpediteur", fields: [numeroCompteExpediteur], references: [numeroCompte])

  @@unique([numeroCompteDestinataire, numeroCompteExpediteur])

}


model Historique {
  idHistorique          String    @id
  type                  EventType
  identifiantOfType     String
  donnee                Json
  dateCreation          DateTime  @default(now())
}

enum EventType {
  PRET_CREATED
  PRET_UPDATED
  PRET_DELETED
  VIREMENT_CREATED
  VIREMENT_UPDATED
  VIREMENT_DELETED
  REMBOURSEMENT_CREATED
  REMBOURSEMENT_UPDATED
  REMBOURSEMENT_DELETED
  VERSEMENT_CREATED
  VERSEMENT_UPDATED
  VERSEMENT_DELETED
  CLIENT_CREATED
  CLIENT_UPDATED
  CLIENT_DELETED
  CAISSIER_CREATED
  CAISSIER_UPDATED
  CAISSIER_DELETED
  RETRAIT_CREATED
  RETRAIT_UPDATED
  RETRAIT_DELETED
  
}